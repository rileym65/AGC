using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Agc
{
    class CpuTests
    {
        private String results;
        private CPU cpu;
        private int goodTests;
        private int badTests;

        public CpuTests()
        {
            cpu = new CPU();
        }

        private void good(String msg) {
            results += "GOOD: " + msg + "\r\n";
            goodTests++;
        }

        private void bad(String msg) {
            results += "BAD:  " + msg + "\r\n";
            badTests++;
        }

        private void ad_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            if (ram[CPU.REG_A] == 11) good("AD produced +11 with +5 and +6");
            else bad("AD did not produce +11 with +5 and +6");
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 0x7ff9;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfff4) good("AD produced -11 with -5 and -6");
            else bad("AD did not produce -11 with -5 and -6 ");
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 6;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 1) good("AD produced +1 with -5 and +6");
            else bad("AD did not produce +1 with -5 and +6 ");
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_A] = 0xfff9;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffe) good("AD produced -1 with +5 and -6");
            else bad("AD did not produce -1 with +5 and -6 ");
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 0x7ffe;
            ram[CPU.REG_A] = 5;
            cpu.cycle();
            if (ram[CPU.REG_A] == 4) good("AD produced +4 with +5 and -1");
            else bad("AD did not produce +4 with +5 and -1");
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 1;
            ram[CPU.REG_A] = 0xfffe;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("AD produced -0 with +1 and -1");
            else bad("AD did not produce -0 with +1 and -1 ");
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 0x3fff;
            ram[CPU.REG_A] = 2;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4001) good("AD produced +1 overflowed with +16383 and +2");
            else bad("AD did not produce +1 overflowed with +16383 and +2 ");
            cpu.reset();
            rom[0x800] = 0x6000 + 0x0ff;
            ram[0xff] = 0x4000;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbffe) good("AD produced -1 overflowed with -16383 and -2");
            else bad("AD did not produce -1 overflowed with -16383 and -2 ");
            cpu.reset();
            rom[0x800] = 0x6000 + CPU.REG_CYL;
            ram[CPU.REG_CYL] = 0x6555;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            if (ram[CPU.REG_CYL] == 0x4aab) good("AD CYL correclty shifted CYL");
            else bad("AD CYL did not correctly shift CYL");
            cpu.reset();
            rom[0x800] = 0x6000 + CPU.REG_CYR;
            ram[CPU.REG_CYR] = 0x6555;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            if (ram[CPU.REG_CYR] == 0x72aa) good("AD CYR correclty shifted CYR");
            else bad("AD CYR did not correctly shift CYR");
            cpu.reset();
            rom[0x800] = 0x6000 + CPU.REG_SR;
            ram[CPU.REG_SR] = 0x6554;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            if (ram[CPU.REG_SR] == 0x72aa) good("AD SR correclty shifted SR");
            else bad("AD SR did not correctly shift SR");
            results += "\r\n";
        }

        private void ads_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x2c00 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            if (ram[CPU.REG_A] == 11) good("ADS produced +11 with +5 and +6");
            else bad("ADS did not produce +11 with +5 and +6");
            if (ram[0xff] == 11) good("ADS also set the memory location");
            else bad("ADS did not set the memory location");
            cpu.reset();
            rom[0x800] = 0x2c00 + 0x0ff;
            ram[0xff] = 0x7ff9;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfff4) good("ADS produced -11 with -5 and -6");
            else bad("ADS did not produce -11 with -5 and -6 ");
            if (ram[0xff] == 0x7ff4) good("ADS also set the memory location");
            else bad("ADS did not set the memory location");
            cpu.reset();
            rom[0x800] = 0x2c00 + 0x0ff;
            ram[0xff] = 6;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 1) good("ADS produced +1 with -5 and +6");
            else bad("ADS did not produce +1 with -5 and +6 ");
            if (ram[0xff] == 1) good("ADS also set the memory location");
            else bad("ADS did not set the memory location");
            cpu.reset();
            rom[0x800] = 0x2c00 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_A] = 0xfff9;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffe) good("ADS produced -1 with +5 and -6");
            else bad("ADS did not produce -1 with +5 and -6 ");
            if (ram[0xff] == 0x7ffe) good("ADS also set the memory location");
            else bad("ADS did not set the memory location");
            cpu.reset();
            rom[0x800] = 0x2c00 + 0x0ff;
            ram[0xff] = 1;
            ram[CPU.REG_A] = 0xfffe;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("ADS produced -0 with +1 and -1");
            else bad("ADS did not produce -0 with +1 and -1 ");
            if (ram[0xff] == 0x7fff) good("ADS also set the memory location");
            else bad("ADS did not set the memory location");
            cpu.reset();
            rom[0x800] = 0x2c00 + 0x0ff;
            ram[0xff] = 0x3fff;
            ram[CPU.REG_A] = 2;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4001) good("ADS produced +1 overflowed with +16383 and +2");
            else bad("ADS did not produce +1 overflowed with +16383 and +2 ");
            if (ram[0xff] == 1) good("ADS also set the memory location to +1");
            else bad("ADS did not set the memory location to +1");
            cpu.reset();
            rom[0x800] = 0x2c00 + 0x0ff;
            ram[0xff] = 0x4000;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbffe) good("ADS produced -1 overflowed with -16383 and -2");
            else bad("ADS did not produce -1 overflowed with -16383 and -2 ");
            if (ram[0xff] == 0x7ffe) good("ADS also set the memory location to -1");
            else bad("ADS did not set the memory location to -1");
            cpu.reset();
            rom[0x800] = 0x2c00 + CPU.REG_CYL;
            ram[CPU.REG_CYL] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            if (ram[CPU.REG_CYL] == 0x16) good("ADS CYL correclty shifted CYL");
            else bad("ADS CYL did not correctly shift CYL");
            cpu.reset();
            rom[0x800] = 0x2c00 + CPU.REG_CYR;
            ram[CPU.REG_CYR] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            if (ram[CPU.REG_CYR] == 0x4005) good("ADS CYR correclty shifted CYR");
            else bad("ADS CYR did not correctly shift CYR");
            cpu.reset();
            rom[0x800] = 0x2c00 + CPU.REG_SR;
            ram[CPU.REG_SR] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            if (ram[CPU.REG_SR] == 0x0005) good("ADS SR correclty shifted SR");
            else bad("ADS SR did not correctly shift SR");
            results += "\r\n";
        }

        private void aug_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + 0x7f;
            ram[0x07f] = 5;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07f] == 6) good("AUG worked correctly on +5");
            else bad("AUG did not work correctly on +5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + 0x7e;
            ram[0x07e] = 0x7ffa;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07e] == 0x7ff9) good("AUG worked correctly on -5");
            else bad("AUG did not work correctly on -5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + 0x7a;
            ram[0x07a] = 0;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07a] == 1) good("AUG worked correctly on +0");
            else bad("AUG did not work correctly on +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + 0x7b;
            ram[0x07b] = 0x7fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07b] == 0x7ffe) good("AUG worked correctly on -0");
            else bad("AUG did not work correctly on -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + 0x7b;
            ram[0x07b] = 0x7fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07b] == 0x7ffe) good("AUG worked correctly on -0");
            else bad("AUG did not work correctly on -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + 0x7c;
            ram[0x07c] = 0x3fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07c] == 0) good("AUG produced +0 on +16383");
            else bad("AUG did not produce +0 on +16383");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + 0x7d;
            ram[0x07d] = 0x4000;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07d] == 0x7fff) good("AUG produced -0 on -16383");
            else bad("AUG did not produce -0 on -16383");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + CPU.REG_A;
            ram[CPU.REG_A] = 0x3fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4000) good("AUG A produced +16384 on +16383");
            else bad("AUG A did not produce +16384 on +16383");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2800 + CPU.REG_A;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbfff) good("AUG A produced -16384 on -16383");
            else bad("AUG A did not produce -16384 on -16383");
            results += "\r\n";
        }

        private void bzmf_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x7f0;
            ram[CPU.REG_A] = 0;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x7f0) good("BZMF jumped when A was +0");
            else bad("BZMF did not jump when A was +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x7f2;
            ram[CPU.REG_A] = 0xffff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x7f2) good("BZMF jumped when A was -0");
            else bad("BZMF did not jump when A was -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x7f0;
            ram[CPU.REG_A] = 5;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("BZMF did not jump when A was +5");
            else bad("BZMF jumped when A was +5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x7f0;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x7f0) good("BZMF jumped when A was -5");
            else bad("BZMF did not jump when A was -5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x7f0;
            ram[CPU.REG_A] = 0x4000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("BZMF did not jump when A was +overflow");
            else bad("BZMF jumped when A was +overflow");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x7f0;
            ram[CPU.REG_A] = 0xbfff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x7f0) good("BZMF jumped when A was -overflow");
            else bad("BZMF did not jump when A was -overflow");
            results += "\r\n";
        }


        private void bzf_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x7f0;
            ram[CPU.REG_A] = 0;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x7f0) good("BZF jumped when A was +0");
            else bad("BZF did not jump when A was +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x7f2;
            ram[CPU.REG_A] = 0xffff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x7f2) good("BZF jumped when A was -0");
            else bad("BZF did not jump when A was -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x7f0;
            ram[CPU.REG_A] = 5;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("BZF did not jump when A was +5");
            else bad("BZF jumped when A was +5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x7f0;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("BZF did not jump when A was -5");
            else bad("BZF jumped when A was -5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x7f0;
            ram[CPU.REG_A] = 0x4000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("BZF did not jump when A was +overflow");
            else bad("BZF jumped when A was +overflow");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x7f0;
            ram[CPU.REG_A] = 0xbfff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("BZF did not jump when A was -overflow");
            else bad("BZF jumped when A was -overflow");
            results += "\r\n";
        }

        private void ca_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x3000 + 0x0ff;
            ram[0xff] = 5;
            cpu.cycle();
            if (ram[CPU.REG_A] == 5) good("CA correctly loaded +5");
            else bad("CA did not correctly load +5");
            cpu.reset();
            rom[0x800] = 0x3000 + 0x0fe;
            ram[0xfe] = 0x7ffa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffa) good("CA correctly loaded -5");
            else bad("CA did not correctly load -5");
            cpu.reset();
            rom[0x800] = 0x3000 + 0x0fa;
            ram[0xfa] = 0;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0) good("CA correctly loaded +0");
            else bad("CA did not correctly load +0");
            cpu.reset();
            rom[0x800] = 0x3000 + 0x0fb;
            ram[0xfb] = 0x7fff;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("CA correctly loaded -0");
            else bad("CA did not correctly load -0");
            cpu.reset();
            rom[0x800] = 0x3000 + CPU.REG_L;
            ram[CPU.REG_L] = 0xbfff;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbfff) good("CA correctly loaded overflowed -0");
            else bad("CA did not correctly load overflowed -0");
            cpu.reset();
            rom[0x800] = 0x3000 + CPU.REG_L;
            ram[CPU.REG_L] = 0x4000;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4000) good("CA correctly loaded overflowed +0");
            else bad("CA did not correctly load overflowed +0");
            cpu.reset();
            rom[0x800] = 0x3000 + CPU.REG_CYL;
            ram[CPU.REG_CYL] = 0x4555;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc555) good("CA correctly loaded value from CYL");
            else bad("CA did not correctly load value from CYL");
            if (ram[CPU.REG_CYL] == 0x0aab) good("CYL was correctly shifted");
            else bad("CYL was not correctly shifted");
            cpu.reset();
            rom[0x800] = 0x3000 + CPU.REG_CYR;
            ram[CPU.REG_CYR] = 0x4aab;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xcaab) good("CA correctly loaded value from CYR");
            else bad("CA did not correctly load value from CYR");
            if (ram[CPU.REG_CYR] == 0x6555) good("CYR was correctly shifted");
            else bad("CYR was not correctly shifted");
            cpu.reset();
            rom[0x800] = 0x3000 + CPU.REG_SR;
            ram[CPU.REG_SR] = 0x6555;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xe555) good("CA correctly loaded negative value from SR");
            else bad("CA did not correctly load negative value from SR");
            if (ram[CPU.REG_SR] == 0x72aa) good("SR was correctly shifted");
            else bad("SR was not correctly shifted");
            cpu.reset();
            rom[0x800] = 0x3000 + CPU.REG_SR;
            ram[CPU.REG_SR] = 0x2555;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x2555) good("CA correctly loaded positive value from SR");
            else bad("CA did not correctly load positive value from SR");
            if (ram[CPU.REG_SR] == 0x12aa) good("SR was correctly shifted");
            else bad("SR was not correctly shifted");
            cpu.reset();
            rom[0x800] = 0x3000 + CPU.REG_EDOP;
            ram[CPU.REG_EDOP] = 0x6aaa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xeaaa) good("CA correctly loaded value from EDOP");
            else bad("CA did not correctly load value from EDOP");
            if (ram[CPU.REG_EDOP] == 0x0055) good("EDOP was correctly shifted");
            else bad("EDOP was not correctly shifted");
            results += "\r\n";
        }

        private void ccs_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x1000 + 0x0ff;
            ram[0xff] = 5;
            cpu.cycle();
            if (ram[CPU.REG_A] == 4) good("CCS correctly loaded +4 from +5");
            else bad("CCS did not correctly load +4 from +5");
            if (ram[CPU.REG_Z] == 0x801) good("CCS did not perform a jump for +5");
            else bad("CCS performed a jump from +5");
            cpu.reset();
            rom[0x800] = 0x1000 + 0x0ff;
            ram[0xff] = 0;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0) good("CCS correctly loaded +0 from +0");
            else bad("CCS did not correctly load +0 from +0");
            if (ram[CPU.REG_Z] == 0x802) good("CCS jump +1 for +0");
            else bad("CCS did not jump +1 from +0");
            cpu.reset();
            rom[0x800] = 0x1000 + 0x0ff;
            ram[0xff] = 0x7ffa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 4) good("CCS correctly loaded +4 from -5");
            else bad("CCS did not correctly load +4 from -5");
            if (ram[CPU.REG_Z] == 0x803) good("CCS jumped +2 for -5");
            else bad("CCS did not jump +2 for -5");
            cpu.reset();
            rom[0x800] = 0x1000 + 0x0ff;
            ram[0xff] = 0x7fff;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0) good("CCS correctly loaded +0 from -0");
            else bad("CCS did not correctly load +0 from -0");
            if (ram[CPU.REG_Z] == 0x804) good("CCS jumped +3 for -0");
            else bad("CCS did not jump +3 for -0");
            cpu.reset();
            rom[0x800] = 0x1000 + CPU.REG_L;
            ram[CPU.REG_L] = 0x4000;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0) good("CCS correctly loaded +0 from +0 overflowed");
            else bad("CCS did not correctly load +0 from +0 overflowed");
            if (ram[CPU.REG_Z] == 0x801) good("CCS did not perform a jump for +0 overflowed");
            else bad("CCS performed a jump from +0 overflowed");
            results += "\r\n";
        }

        private void cs_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x4000 + 0x0ff;
            ram[0xff] = 5;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffa) good("CS correctly loaded +5 as -5");
            else bad("CS did not correctly load +5 as -5");
            cpu.reset();
            rom[0x800] = 0x4000 + 0x0fe;
            ram[0xfe] = 0x7ffa;
            cpu.cycle();
            if (ram[CPU.REG_A] == 5) good("CS correctly loaded -5 as +5");
            else bad("CS did not correctly load -5 as +5");
            cpu.reset();
            rom[0x800] = 0x4000 + 0x0fa;
            ram[0xfa] = 0;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("CS correctly loaded +0 as -0");
            else bad("CA did not correctly load +0 as -0");
            cpu.reset();
            rom[0x800] = 0x4000 + 0x0fb;
            ram[0xfb] = 0x7fff;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0) good("CS correctly loaded -0 as +0");
            else bad("CA did not correctly load -0 as +0");
            cpu.reset();
            rom[0x800] = 0x4000 + CPU.REG_L;
            ram[CPU.REG_L] = 0xbfff;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4000) good("CS correctly loaded overflowed -0 as overflowed +0");
            else bad("CS did not correctly load overflowed -0 as overflowed +0");
            cpu.reset();
            rom[0x800] = 0x4000 + CPU.REG_L;
            ram[CPU.REG_L] = 0x4000;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbfff) good("CS correctly loaded overflowed +0 as overflowed -0");
            else bad("CS did not correctly load overflowed +0 as overflowed -0");
            results += "\r\n";
        }

        private void das_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x2001 + 0x0f0;
            ram[0xf0] = 5;
            ram[0xf1] = 7;
            ram[CPU.REG_A] = 6;
            ram[CPU.REG_L] = 8;
            cpu.cycle();
            if (ram[0xf0] == 11) good("DAS produced +11 with +5 and +6 in the high word");
            else bad("DAS did not produce +11 with +5 and +6 in the high word");
            if (ram[0xf1] == 15) good("DAS produced +15 with +7 and +8 in the low word");
            else bad("DAS did not produce +15 with +7 and +8 in the low word");
            if (ram[CPU.REG_L] == 0) good("DAS cleared L");
            else bad("DAS did not clear L");
            if (ram[CPU.REG_A] == 0) good("DAS set A to +0 inidicating no overflow");
            else bad("DAS did not set A to +0 to indicate no overflow");
            cpu.reset();
            rom[0x800] = 0x2001 + 0x0f0;
            ram[0xf0] = 0x7ffa;
            ram[0xf1] = 0x7ff8;
            ram[CPU.REG_A] = 0xfff9;
            ram[CPU.REG_L] = 0xfff7;
            cpu.cycle();
            if (ram[0xf0] == 0x7ff4) good("DAS produced -11 with -5 and -6 in the high word");
            else bad("DAS did not produce -11 with -5 and -6 in the high word");
            if (ram[0xf1] == 0x7ff0) good("DAS produced -15 with -7 and -8 in the low word");
            else bad("DAS did not produce -15 with -7 and -8 in the low word");
            if (ram[CPU.REG_A] == 0) good("DAS set A to +0 inidicating no overflow");
            else bad("DAS did not set A to +0 to indicate no overflow");
            cpu.reset();
            rom[0x800] = 0x2001 + 0x0f0;
            ram[0xf0] = 0x7ffa;
            ram[0xf1] = 7;
            ram[CPU.REG_A] = 0xfff9;
            ram[CPU.REG_L] = 8;
            cpu.cycle();
            if (ram[0xf0] == 0x7ff4) good("DAS produced -11 with -5 and -6 in the high word");
            else bad("DAS did not produce -11 with -5 and -6 in the high word");
            if (ram[0xf1] == 15) good("DAS produced +15 with +7 and +8 in the low word");
            else bad("DAS did not produce +15 with +7 and +8 in the low word");
            if (ram[CPU.REG_A] == 0) good("DAS set A to +0 inidicating no overflow");
            else bad("DAS did not set A to +0 to indicate no overflow");
            cpu.reset();
            rom[0x800] = 0x2001 + 0x0f0;
            ram[0xf0] = 0;
            ram[0xf1] = 0x3fff;
            ram[CPU.REG_A] = 0;
            ram[CPU.REG_L] = 1;
            cpu.cycle();
            if (ram[0xf1] == 0x0000) good("DAS produced +0 with +16383 and +1 in the low word");
            else bad("DAS did not produce +0 with +16383 and +1 in the low word");
            if (ram[0xf0] == 0x1) good("DAS properly carried forward the +1 into the high word");
            else bad("DAS did not properly carry forward the +1 into the high word");
            if (ram[CPU.REG_A] == 0) good("DAS set A to +0 inidicating no overflow");
            else bad("DAS did not set A to +0 to indicate no overflow");
            cpu.reset();
            rom[0x800] = 0x2001 + 0x0f0;
            ram[0xf0] = 0;
            ram[0xf1] = 0x4000;
            ram[CPU.REG_A] = 5;
            ram[CPU.REG_L] = 0xfffe;
            cpu.cycle();
            if (ram[0xf1] == 0x7fff) good("DAS produced -0 with -16383 and -1 in the low word");
            else bad("DAS did not produce -0 with -16383 and -1 in the low word");
            if (ram[0xf0] == 0x4) good("DAS properly carried forward the -1 into the high word");
            else bad("DAS did not properly carry forward the -1 into the high word");
            if (ram[CPU.REG_A] == 0) good("DAS set A to +0 inidicating no overflow");
            else bad("DAS did not set A to +0 to indicate no overflow");
            cpu.reset();
            rom[0x800] = 0x2001 + 0x0f0;
            ram[0xf0] = 1;
            ram[0xf1] = 0;
            ram[CPU.REG_A] = 0x3fff;
            ram[CPU.REG_L] = 0;
            cpu.cycle();
            if (ram[0xf0] == 0x0000) good("DAS produced +0 with +16383 and +1 in the high word");
            else bad("DAS did not produce +0 with +16383 and +1 in the high word");
            if (ram[CPU.REG_A] == 1) good("DAS set A to +1 inidicating positive overflow");
            else bad("DAS did not set A to +1 to indicate positive overflow");
            cpu.reset();
            rom[0x800] = 0x2001 + 0x0f0;
            ram[0xf0] = 0x7ffe;
            ram[0xf1] = 0;
            ram[CPU.REG_A] = 0xc000;
            ram[CPU.REG_L] = 0;
            cpu.cycle();
            if (ram[0xf0] == 0x7fff) good("DAS produced -0 with -16383 and -1 in the high word");
            else bad("DAS did not produce -0 with -16383 and -1 in the high word");
            if (ram[CPU.REG_A] == 0xfffe) good("DAS set A to -1 inidicating negative overflow");
            else bad("DAS did not set A to -1 to indicate negative overflow");
            results += "\r\n";
        }

        private void dca_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + 0x0f0;
            ram[0xf0] = 5;
            ram[0xf1] = 3;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 5) good("DCA correctly loaded A with +5");
            else bad("DCA did not correctly load A with +5");
            if (ram[CPU.REG_L] == 3) good("DCA correctly loaded L with +3");
            else bad("DCA did not correctly load L with +3");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + 0x0f0;
            ram[0xf0] = 0x7ffa;
            ram[0xf1] = 0x7ffc;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffa) good("DCA correctly loaded A with -5");
            else bad("DCA did not correctly load A with -5");
            if (ram[CPU.REG_L] == 0xfffc) good("DCA correctly loaded L with -3");
            else bad("DCA did not correctly load L with -3");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + 0x0f0;
            ram[0xf0] = 0x0000;
            ram[0xf1] = 0x0000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x0000) good("DCA correctly loaded A with +0");
            else bad("DCA did not correctly load A with +0");
            if (ram[CPU.REG_L] == 0x0000) good("DCA correctly loaded L with +0");
            else bad("DCA did not correctly load L with +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + 0x0f0;
            ram[0xf0] = 0x7fff;
            ram[0xf1] = 0x7fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("DCA correctly loaded A with -0");
            else bad("DCA did not correctly load A with -0");
            if (ram[CPU.REG_L] == 0xffff) good("DCA correctly loaded L with -0");
            else bad("DCA did not correctly load L with -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + CPU.REG_L;
            ram[CPU.REG_Q] = 0xbfff;
            ram[CPU.REG_L] = 0x7ffe;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbfff) good("DCA L correctly loaded overflowed -0 into A");
            else bad("DCA L did not correctly load overflowed -0 into A");
            if (ram[CPU.REG_L] == 0xffff) good("DCA L correctly loaded -0 into L");
            else bad("DCA L did not correctly load -0 into L");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + CPU.REG_L;
            ram[CPU.REG_Q] = 0x4000;
            ram[CPU.REG_L] = 0x7ffe;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4000) good("DCA L correctly loaded overflowed +0 into A");
            else bad("DCA L did not correctly load overflowed +0 into A");
            if (ram[CPU.REG_L] == 0x0000) good("DCA L correctly loaded +0 into L");
            else bad("DCA L did not correctly load +0 into L");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + CPU.REG_CYR;
            ram[CPU.REG_CYR] = 0x4555;
            ram[CPU.REG_SR] = 0x6555;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc555) good("DCA CYR correctly loaded value from CYR");
            else bad("DCA CYR did not correctly load value from CYR");
            if (ram[CPU.REG_CYR] == 0x62aa) good("CYR was correctly shifted");
            else bad("CYR was not correctly shifted");
            if (ram[CPU.REG_L] == 0xe555) good("DCA CYR correctly loaded value from SR");
            else bad("DCA CYR did not correctly load value from SR");
            if (ram[CPU.REG_SR] == 0x72aa) good("SR was correctly shifted");
            else bad("SR was not correctly shifted");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x3001 + CPU.REG_CYL;
            ram[CPU.REG_CYL] = 0x4555;
            ram[CPU.REG_EDOP] = 0x6aaa;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc555) good("DCA CYL correctly loaded value from CYL");
            else bad("DCA CYL did not correctly load value from CYL");
            if (ram[CPU.REG_CYL] == 0x0aab) good("CYL was correctly shifted");
            else bad("CYL was not correctly shifted");
            if (ram[CPU.REG_L] == 0xeaaa) good("DCA CYL correctly loaded value from EDOP");
            else bad("DCA CYR did not correctly load value from SR");
            if (ram[CPU.REG_EDOP] == 0x0055) good("EDOP was correctly shifted");
            else bad("EDOP was not correctly shifted");
            results += "\r\n";
        }

        private void dcs_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + 0x0f0;
            ram[0xf0] = 5;
            ram[0xf1] = 3;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffa) good("DCS correctly loaded A with -5");
            else bad("DCS did not correctly load A with -5");
            if (ram[CPU.REG_L] == 0xfffc) good("DCS correctly loaded L with -3");
            else bad("DCS did not correctly load L with -3");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + 0x0f0;
            ram[0xf0] = 0x7ffa;
            ram[0xf1] = 0x7ffc;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 5) good("DCS correctly loaded A with +5");
            else bad("DCS did not correctly load A with +5");
            if (ram[CPU.REG_L] == 3) good("DCS correctly loaded L with +3");
            else bad("DCS did not correctly load L with +3");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + 0x0f0;
            ram[0xf0] = 0x0000;
            ram[0xf1] = 0x0000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("DCS correctly loaded A with -0");
            else bad("DCS did not correctly load A with -0");
            if (ram[CPU.REG_L] == 0xffff) good("DCS correctly loaded L with -0");
            else bad("DCS did not correctly load L with -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + 0x0f0;
            ram[0xf0] = 0x7fff;
            ram[0xf1] = 0x7fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0) good("DCS correctly loaded A with +0");
            else bad("DCS did not correctly load A with +0");
            if (ram[CPU.REG_L] == 0) good("DCS correctly loaded L with +0");
            else bad("DCS did not correctly load L with +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + CPU.REG_L;
            ram[CPU.REG_Q] = 0xbfff;
            ram[CPU.REG_L] = 0x7ffe;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbfff) good("DCS L correctly loaded overflowed -0 into A");
            else bad("DCS L did not correctly load overflowed +0 into A");
            if (ram[CPU.REG_L] == 0x0000) good("DCS L correctly loaded +0 into L");
            else bad("DCS L did not correctly load +0 into L");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + CPU.REG_L;
            ram[CPU.REG_Q] = 0x4000;
            ram[CPU.REG_L] = 0x7ffe;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4000) good("DCS L correctly loaded overflowed +0 into A");
            else bad("DCS L did not correctly load overflowed +0 into A");
            if (ram[CPU.REG_L] == 0xffff) good("DCS L correctly loaded -0 into L");
            else bad("DCS L did not correctly load +0 into L");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + CPU.REG_CYR;
            ram[CPU.REG_CYR] = 0x4555;
            ram[CPU.REG_SR] = 0x6555;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3aaa) good("DCS CYR correctly loaded value from CYR");
            else bad("DCS CYR did not correctly load value from CYR");
            if (ram[CPU.REG_CYR] == 0x62aa) good("CYR was correctly shifted");
            else bad("CYR was not correctly shifted");
            if (ram[CPU.REG_L] == 0x1aaa) good("DCS CYR correctly loaded value from SR");
            else bad("DCS CYR did not correctly load value from SR");
            if (ram[CPU.REG_SR] == 0x72aa) good("SR was correctly shifted");
            else bad("SR was not correctly shifted");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x4001 + CPU.REG_CYL;
            ram[CPU.REG_CYL] = 0x4555;
            ram[CPU.REG_EDOP] = 0x6aaa;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3aaa) good("DCS CYL correctly loaded value from CYL");
            else bad("DCS CYL did not correctly load value from CYL");
            if (ram[CPU.REG_CYL] == 0x0aab) good("CYL was correctly shifted");
            else bad("CYL was not correctly shifted");
            if (ram[CPU.REG_L] == 0x1555) good("DCS CYL correctly loaded value from EDOP");
            else bad("DCS CYR did not correctly load value from SR");
            if (ram[CPU.REG_EDOP] == 0x0055) good("EDOP was correctly shifted");
            else bad("EDOP was not correctly shifted");
            results += "\r\n";
        }

        private void dim_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + 0x7f;
            ram[0x07f] = 5;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07f] == 4) good("DIM produced +4 on +5");
            else bad("DIM did not produce +4 on +5 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + 0x7e;
            ram[0x07e] = 0x7ffa;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07e] == 0x7ffb) good("DIM produced -4 on -5");
            else bad("DIM did not produce -4 on -5 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + 0x7f;
            ram[0x07f] = 1;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07f] == 0x7fff) good("DIM produced -0 on +1");
            else bad("DIM did not produce -0 on +1 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + 0x7f;
            ram[0x07f] = 0x7ffe;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07f] == 0x7fff) good("DIM produced -0 on -1");
            else bad("DIM did not produce -0 on -1");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + 0x7a;
            ram[0x07a] = 0;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07a] == 0) good("DIM produced +0 on +0");
            else bad("DIM did not produce +0 on +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + 0x7b;
            ram[0x07b] = 0x7fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[0x07b] == 0x7fff) good("DIM produced -0 on -0");
            else bad("DIM did not produced -0 on -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + CPU.REG_A;
            ram[CPU.REG_A] = 0x4000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3fff) good("DIM A produced +16383 on +16384");
            else bad("DIM A did not produce +16383 on +16384 " + ram[CPU.REG_A].ToString());
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2c00 + CPU.REG_A;
            ram[CPU.REG_A] = 0xbfff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc000) good("DIM A produced -16383 on -16384");
            else bad("DIM A did not produce -16383 on -16384");
            results += "\r\n";
        }

        private void dv_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x2000;
            ram[CPU.REG_A] = 0x0800;
            ram[CPU.REG_L] = 0x0000; 
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x1000) good("DV produced +.25 from +.125 and +.5");
            else bad("DV did not produce +.25 from +.125 and +.5");
            if (ram[CPU.REG_L] == 0x0000) good("DV remainder was +0");
            else bad("DV remainder was not +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x2000;
            ram[CPU.REG_A] = 0x1fff;
            ram[CPU.REG_L] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3ffc) good("DV produced +.9997558594 from +.4998779443 and +.5");
            else bad("DV did not produce +.9997558594 from +.4998779443 and +.5");
            if (ram[CPU.REG_L] == 0x0001) good("DV remainder was +.0000000037");
            else bad("DV remainder was not +.0000000037");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x5fff;
            ram[CPU.REG_A] = 0x1fff;
            ram[CPU.REG_L] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc003) good("DV produced -.9997558594 from +.4998779443 and -.5");
            else bad("DV did not produce -.9997558594 from +.4998779443 and -.5");
            if (ram[CPU.REG_L] == 0x0001) good("DV remainder was +.0000000037");
            else bad("DV remainder was not +.0000000037");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x2000;
            ram[CPU.REG_A] = 0xe000;
            ram[CPU.REG_L] = 0x3fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc003) good("DV produced -.9997558594 from -.4998779443 and +.5");
            else bad("DV did not produce -.9997558594 from -.4998779443 and +.5");
            if (ram[CPU.REG_L] == 0xfffe) good("DV remainder was -.0000000037");
            else bad("DV remainder was not -.0000000037");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x5fff;
            ram[CPU.REG_A] = 0xe000;
            ram[CPU.REG_L] = 0x3fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3ffc) good("DV produced -.9997558594 from -.4998779443 and -.5");
            else bad("DV did not produce -.9997558594 from -.4998779443 and -.5");
            if (ram[CPU.REG_L] == 0xfffe) good("DV remainder was -.0000000037");
            else bad("DV remainder was not -.0000000037");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x2000;
            ram[CPU.REG_A] = 0x1fff;
            ram[CPU.REG_L] = 0x3fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3fff) good("DV produced +0.9999389648 from +0.4999999963 and +.5");
            else bad("DV did not produce +0.9999389648 from +0.4999999963 and +.5");
            if (ram[CPU.REG_L] == 0x1fff) good("DV remainder was +0.0000305139");
            else bad("DV remainder was not +0.0000305139");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x0000;
            ram[CPU.REG_A] = 0xffff;
            ram[CPU.REG_L] = 0xffff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc000) good("DV produced -0.9999389648 from -0 and +0");
            else bad("DV did not produce -0.9999389648 from -0 and +0");
            if (ram[CPU.REG_L] == 0xffff) good("DV remainder was -0");
            else bad("DV remainder was not -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x7fff;
            ram[CPU.REG_A] = 0xffff;
            ram[CPU.REG_L] = 0xffff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3fff) good("DV produced +0.9999389648 from -0 and -0");
            else bad("DV did not produce +0.9999389648 from -0 and -0");
            if (ram[CPU.REG_L] == 0xffff) good("DV remainder was -0");
            else bad("DV remainder was not -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x000;
            ram[CPU.REG_A] = 0x0000;
            ram[CPU.REG_L] = 0x0000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x3fff) good("DV produced +0.9999389648 from +0 and +0");
            else bad("DV did not produce +0.9999389648 from +0 and +0");
            if (ram[CPU.REG_L] == 0x0000) good("DV remainder was +0");
            else bad("DV remainder was not +0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x1000 + 0x0ff;
            ram[0xff] = 0x7fff;
            ram[CPU.REG_A] = 0x0000;
            ram[CPU.REG_L] = 0x0000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc000) good("DV produced -0.9999389648 from +0 and -0");
            else bad("DV did not produce -0.9999389648 from +0 and -0");
            if (ram[CPU.REG_L] == 0x0000) good("DV remainder was +0");
            else bad("DV remainder was not +0");
            results += "\r\n";
        }

        private void dxch_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x5401 + 0x0f0;
            ram[0xf0] = 5;
            ram[0xf1] = 4;
            ram[CPU.REG_A] = 1;
            ram[CPU.REG_L] = 2;
            cpu.cycle();
            if (ram[CPU.REG_A] == 5) good("DXCH correctly loaded +5 into A");
            else bad("DXCH did not load +5 into A");
            if (ram[CPU.REG_L] == 4) good("DXCH correctly loaded +4 into L");
            else bad("DXCH did not load +4 into L");
            if (ram[0xf0] == 1) good("DXCH correctly loaded +1 into into ram[k]");
            else bad("DXCH did not load +1 into ram[k]");
            if (ram[0xf1] == 2) good("DXCH correctly loaded +2 into into ram[k+1]");
            else bad("DXCH did not load +2 into ram[k+1]");
            cpu.reset();
            rom[0x800] = 0x5401 + 0x0f0;
            ram[0xf0] = 0x7ffa;
            ram[0xf1] = 0x7ffb;
            ram[CPU.REG_A] = 0xfffe;
            ram[CPU.REG_L] = 0xfffd;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffa) good("DXCH correctly loaded -5 into A");
            else bad("DXCH did not load -5 into A");
            if (ram[CPU.REG_L] == 0xfffb) good("DXCH correctly loaded -4 into L");
            else bad("DXCH did not load -4 into L");
            if (ram[0xf0] == 0x7ffe) good("DXCH correctly loaded -1 into into ram[k]");
            else bad("DXCH did not load +1 into ram[k]");
            if (ram[0xf1] == 0x7ffd) good("DXCH correctly loaded -2 into into ram[k+1]");
            else bad("DXCH did not load +2 into ram[k+1]");
            cpu.reset();
            rom[0x800] = 0x5401 + CPU.REG_L;
            ram[CPU.REG_A] = 0xfffe;
            ram[CPU.REG_L] = 0xfffd;
            ram[CPU.REG_Q] = 0xfffc;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffc) good("DXCH L correctly loaded -3 into A");
            else bad("DXCH L did not load -3 into A");
            if (ram[CPU.REG_L] == 0xfffe) good("DXCH L correctly loaded -1 into L");
            else bad("DXCH L did not load -1 into L");
            if (ram[CPU.REG_Q] == 0xfffd) good("DXCH L correctly loaded -2 into Q");
            else bad("DXCH L did not load -2 into Q");
            results += "\r\n";
        }

        private void incr_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x2800 + 0x0ff;
            ram[0xff] = 5;
            cpu.cycle();
            if (ram[0xff] == 6) good("INCR correctly incremented +5 to +6");
            else bad("INCR did not correctly increment +5 to +6");
            cpu.reset();
            rom[0x800] = 0x2800 + 0x0ff;
            ram[0xff] = 0x7ffa;
            cpu.cycle();
            if (ram[0xff] == 0x7ffb) good("INCR correctly incremented -5 to -4");
            else bad("INCR did not correctly increment -5 to -4");
            cpu.reset();
            rom[0x800] = 0x2800 + 0x0ff;
            ram[0xff] = 0x7fff;
            cpu.cycle();
            if (ram[0xff] == 1) good("INCR correctly incremented -0 to +1");
            else bad("INCR did not correctly increment -0 to +1");
            cpu.reset();
            rom[0x800] = 0x2800 + 0x0ff;
            ram[0xff] = 0x7ffe;
            cpu.cycle();
            if (ram[0xff] == 0x7fff) good("INCR correctly incremented -1 to -0");
            else bad("INCR did not correctly increment -1 to -0");
            cpu.reset();
            rom[0x800] = 0x2800 + 0x0ff;
            ram[0xff] = 0x3fff;
            cpu.cycle();
            if (ram[0xff] == 0) good("INCR correctly incremented +16383 to +0");
            else bad("INCR did not correctly increment +16383 to +0");
            cpu.reset();
            rom[0x800] = 0x2800 + CPU.REG_A;
            ram[CPU.REG_A] = 0x3fff;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4000) good("INCR A correctly incremented +16383 to +16384");
            else bad("INCR A did not correctly increment +16383 to +16384");
            results += "\r\n";
        }

        private void index_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x5000 + 0x0ff;    //   INDEX 0xff
            rom[0x801] = 0x5800 + 0x0f0;    //   TS 0xf0
            ram[0xff] = 5;
            ram[CPU.REG_A] = 123;
            cpu.cycle();
            cpu.cycle();
            cpu.cycle();
            if (ram[0xf5] == 123) good("INDEX correctly modified TS 0xf0 to TS 0xf5");
            else bad("INDEX did not correctly modify TS 0xf0 to TS 0xf5");
            cpu.reset();
            rom[0x800] = 0x0006;            //   EXTEND
            rom[0x801] = 0x5000 + 0x0ff;    //   INDEX 0xff
            rom[0x802] = 0x6000 + 0x0f0;    //   SU 0xf0
            ram[0xff] = 5;
            ram[CPU.REG_A] = 123;
            ram[0xf5] = 10;
            cpu.cycle();
            cpu.cycle();
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 113) good("INDEX EXTENDed correctly modified SU 0xf0 to SU 0xf5");
            else bad("INDEX EXTENDed did not correctly modify SU 0xf0 to SU 0xf5");
            results += "\r\n";
        }

        private void inhint_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0004;
            cpu.cycle();
            if (cpu.getInhint() == true) good("INHINT disabled interrupts");
            else bad("INHINT did not disable interrupts");
            results += "\r\n";
        }

        private void lxch_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x2400 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_L] = 2;
            cpu.cycle();
            if (ram[CPU.REG_L] == 5 && ram[0xff] == 2) good("LXCH properly exchanged +5 and +2");
            else bad("LXCH did not properly exchange +5 and +2");
            cpu.reset();
            rom[0x800] = 0x2400 + 0x0ff;
            ram[0xff] = 0x7ffa;
            ram[CPU.REG_L] = 3;
            cpu.cycle();
            if (ram[CPU.REG_L] == 0xfffa && ram[0xff] == 3) good("LXCH properly exchanged -5 and +3");
            else bad("LXCH did not properly exchange -5 and +3");
            cpu.reset();
            rom[0x800] = 0x2400 + 0x0ff;
            ram[0xff] = 0x7ffa;
            ram[CPU.REG_L] = 0xfffb;
            cpu.cycle();
            if (ram[CPU.REG_L] == 0xfffa && ram[0xff] == 0x7ffb) good("LXCH properly exchanged -5 and -4");
            else bad("LXCH did not properly exchange -5 and -4");
            cpu.reset();
            rom[0x800] = 0x2400 + CPU.REG_A;
            ram[CPU.REG_A] = 0xbfff;
            ram[CPU.REG_L] = 0x7ffe;
            cpu.cycle();
            if (ram[CPU.REG_L] == 0xbfff && ram[CPU.REG_A] == 0x7ffe) good("LXCH A properly exchanged A and L");
            else bad("LXCH did not properly exchange A and L");
            results += "\r\n";
        }

        private void mask_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x7000 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            if (ram[CPU.REG_A] == 4) good("MASK produced +4 for +5 and +6");
            else bad("MASK did not produce +4 for +5 and +6");
            cpu.reset();
            rom[0x800] = 0x7000 + 0x0ff;
            ram[0xff] = 0x2009;
            ram[CPU.REG_A] = 0xb00a;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x2008) good("MASK produced 0x2008 for 0x2009 and 0xb00a");
            else bad("MASK did not produce 0x2008 for 0x2009 and 0xb00a");
            cpu.reset();
            rom[0x800] = 0x7000 + 0x0ff;
            ram[0xff] = 0x6005;
            ram[CPU.REG_A] = 0xd00a;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc000) good("MASK produced 0xc000 for 0x6005 and 0xd00a");
            else bad("MASK did not produce 0xc000 for 0x6005 and 0xd00a");
            cpu.reset();
            rom[0x800] = 0x7000 + CPU.REG_L;
            ram[CPU.REG_L] = 0xb000;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x8000) good("MASK produced 0x8000 for 0xb000 and 0xc000");
            else bad("MASK did not produce 0x8000 for 0xb000 and 0xc000");
            results += "\r\n";
        }

        private void mp_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x2000;
            ram[CPU.REG_A] = 0x2000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x1000) good("MP produced +.25 from +.5 and +.5");
            else bad("MP did not produce +.25 from +.5 and +.5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x5fff;
            ram[CPU.REG_A] = 0x2000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xefff) good("MP produced -.25 from +.5 and -.5");
            else bad("MP did not produce -.25 from +.5 and -.5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x5fff;
            ram[CPU.REG_A] = 0xdfff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x1000) good("MP produced +.25 from -.5 and -.5");
            else bad("MP did not produce +.25 from -.5 and -.5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x7fff;
            ram[CPU.REG_A] = 5;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x0000) good("MP produced +0 from +5 and -0");
            else bad("MP did not produce +0 from +5 and -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x0000;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x0000) good("MP produced +0 from -5 and +0");
            else bad("MP did not produce +0 from +5 and -0");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x0005;
            ram[CPU.REG_A] = 0x0000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x0000) good("MP produced +0 from +0 and +5");
            else bad("MP did not produce +0 from +0 and +5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x7ffa;
            ram[CPU.REG_A] = 0x0000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("MP produced -0 from +0 and -5");
            else bad("MP did not produce -0 from +0 and -5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_A] = 0xffff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("MP produced -0 from -0 and +5");
            else bad("MP did not produce -0 from -0 and +5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x7000 + 0x0ff;
            ram[0xff] = 0x7ffa;
            ram[CPU.REG_A] = 0xffff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x0000) good("MP produced +0 from -0 and -5");
            else bad("MP did not produce +0 from -0 and -5");
            results += "\r\n";
        }

        private void msu_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2000 + 0x0ff;
            ram[CPU.REG_A] = 6;
            ram[0xff] = 4;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 2) good("MSU correctly subtracted 4 from 6");
            else bad("MSU did not correctly subtract 4 from 6");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2000 + 0x0ff;
            ram[CPU.REG_A] = 4;
            ram[0xff] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffd) good("MSU correctly subtracted 6 from 4");
            else bad("MSU did not correctly subtract 6 from 4");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2000 + 0x0ff;
            ram[CPU.REG_A] = 16384;
            ram[0xff] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 16378) good("MSU correctly subtracted 6 from 16384");
            else bad("MSU did not correctly subtract 6 from 16384");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2000 + 0x0ff;
            ram[CPU.REG_A] = 6;
            ram[0xff] = 16384;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc005) good("MSU correctly subtracted 16384 from 6");
            else bad("MSU did not correctly subtract 16384 from 6" + ram[0].ToString());
            results += "\r\n";
        }


        private void qxch_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2400 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_Q] = 2;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Q] == 5 && ram[0xff] == 2) good("QXCH properly exchanged +5 and +2");
            else bad("QXCH did not properly exchange +5 and +2");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2400 + 0x0ff;
            ram[0xff] = 0x7ffa;
            ram[CPU.REG_Q] = 3;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Q] == 0xfffa && ram[0xff] == 3) good("QXCH properly exchanged -5 and +3");
            else bad("QXCH did not properly exchange -5 and +3");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2400 + 0x0ff;
            ram[0xff] = 0x7ffa;
            ram[CPU.REG_Q] = 0xfffb;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Q] == 0xfffa && ram[0xff] == 0x7ffb) good("QXCH properly exchanged -5 and -4");
            else bad("QXCH did not properly exchange -5 and -4");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x2400 + CPU.REG_A;
            ram[CPU.REG_A] = 0xbfff;
            ram[CPU.REG_Q] = 0x7ffe;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Q] == 0xbfff && ram[CPU.REG_A] == 0x7ffe) good("QXCH A properly exchanged A and X");
            else bad("QXCH did not properly exchange A and X");
            results += "\r\n";
        }

        private void rand_tests()
        {
            int[] ram;
            int[] rom;
            int[] port;
            ram = cpu.getRam();
            rom = cpu.getRom();
            port = cpu.getPorts();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0400 + 0x0ff;
            port[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 4) good("RAND produced +4 for +5 and +6");
            else bad("RAND did not produce +4 for +5 and +6");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0400 + 0x0ff;
            port[0xff] = 0x2009;
            ram[CPU.REG_A] = 0xb00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x2008) good("RAND produced 0x2008 for 0x2009 and 0xb00a");
            else bad("RAND did not produce 0x2008 for 0x2009 and 0xb00a");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0400 + 0x0ff;
            port[0xff] = 0x6005;
            ram[CPU.REG_A] = 0xd00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc000) good("RAND produced 0xc000 for 0x6005 and 0xd00a");
            else bad("RAND did not produce 0xc000 for 0x6005 and 0xd00a");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0400 + CPU.REG_L;
            port[CPU.REG_L] = 0xb000;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x8000) good("RAND produced 0x8000 for 0xb000 and 0xc000");
            else bad("RAND did not produce 0x8000 for 0xb000 and 0xc000");
            results += "\r\n";
        }

        private void read_tests()
        {
            int[] ram;
            int[] rom;
            int[] port;
            ram = cpu.getRam();
            rom = cpu.getRom();
            port = cpu.getPorts();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0000 + 0x02f;
            port[0x2f] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 5) good("READ placed +5 in A from +5");
            else bad("READ did not place +5 in A from +5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0000 + 0x02f;
            port[0x2f] = 0x7ffa;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffa) good("READ placed -5 in A from -5");
            else bad("READ did not place -5 in A from -5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0000 + CPU.REG_L;
            port[CPU.REG_L] = 0xb005;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xb005) good("READ placed 0xb005 in A from 0xb005");
            else bad("READ did not place 0xb005 in A from 0xb005");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0000 + CPU.REG_L;
            port[CPU.REG_L] = 0x5005;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x5005) good("READ placed 0x5005 in A from 0x5005");
            else bad("READ did not place 0x5005 in A from 0x5005");
            results += "\r\n";
        }

        private void relint_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0004;
            cpu.cycle();
            rom[0x801] = 0x0003;
            cpu.cycle();
            if (cpu.getInhint() == false) good("RELINT enabled interrupts");
            else bad("RELINT did not enable interrupts");
            results += "\r\n";
        }

        private void resume_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x500f;
            ram[CPU.REG_ZRUPT] = 0x7fa;
            ram[CPU.REG_BRUPT] = 0x710;
            cpu.cycle();
            if (cpu.getIE() == true) good("RESUME enabled interrupts");
            else bad("RESUME did not enable interrupts");
            if (ram[CPU.REG_Z] == 0x7fa) good("RESUME properly set Z");
            else bad("RESUME did not properly set Z");
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x710) good("RESUME correclty used BRUPT for next instruction");
            else bad("RESUME did not correcly use BRUPT for next instruction" + ram[CPU.REG_Z].ToString());
            results += "\r\n";
        }

        private void ror_tests()
        {
            int[] ram;
            int[] rom;
            int[] port;
            ram = cpu.getRam();
            rom = cpu.getRom();
            port = cpu.getPorts();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0800 + 0x0ff;
            port[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 7) good("ROR produced +7 for +5 and +6");
            else bad("ROR did not produce +7 for +5 and +6");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0800 + 0x0ff;
            port[0xff] = 0x2009;
            ram[CPU.REG_A] = 0xb00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xf00b) good("ROR produced 0xf00b for 0x2009 and 0xb00a");
            else bad("ROR did not produce 0xb00b for 0xf009 and 0xb00a");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0800 + 0x0ff;
            port[0xff] = 0x6005;
            ram[CPU.REG_A] = 0xd00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xf00f) good("ROR produced 0xf00f for 0x6005 and 0xd00a");
            else bad("ROR did not produce 0xf00f for 0x6005 and 0xd00a");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0800 + CPU.REG_L;
            port[CPU.REG_L] = 0xb000;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xf000) good("ROR produced 0xf000 for 0xb000 and 0xc000");
            else bad("ROR did not produce 0xf000 for 0xb000 and 0xc000");
            results += "\r\n";
        }

        private void rxor_tests()
        {
            int[] ram;
            int[] rom;
            int[] port;
            ram = cpu.getRam();
            rom = cpu.getRom();
            port = cpu.getPorts();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0c00 + 0x0ff;
            port[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 3) good("RXOR produced +3 for +5 and +6");
            else bad("RXOR did not produce +3 for +5 and +6");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0c00 + 0x0ff;
            port[0xff] = 0x2009;
            ram[CPU.REG_A] = 0xb00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xd003) good("RXOR produced 0xd003 for 0x2009 and 0xb00a");
            else bad("RXOR did not produce 0xd003 for 0xf009 and 0xb00a");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0c00 + 0x0ff;
            port[0xff] = 0x6005;
            ram[CPU.REG_A] = 0xd00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x300f) good("RXOR produced 0x300f for 0x6005 and 0xd00a");
            else bad("RXOR did not produce 0x300f for 0x6005 and 0xd00a");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0c00 + CPU.REG_L;
            port[CPU.REG_L] = 0xb000;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x7000) good("RXOR produced 0x7000 for 0xb000 and 0xc000");
            else bad("RXOR did not produce 0x7000 for 0xb000 and 0xc000");
            results += "\r\n";
        }

        private void su_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 1) good("SU produced +1 with +6 and +5");
            else bad("SU did not produce +1 with +6 and +5");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 0x7ffa;
            ram[CPU.REG_A] = 0xfff9;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfffe) good("SU produced -1 with -6 and -5");
            else bad("SU did not produce -1 with -6 and -5 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 6;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xfff4) good("SU produced -11 with -5 and +6");
            else bad("SU did not produce -11 with -5 and +6 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 0x7ff9;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 1) good("SU produced +1 with -5 and -6");
            else bad("SU did not produce +1 with -5 and -6 "+ram[0].ToString());
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 0x7ffe;
            ram[CPU.REG_A] = 5;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 6) good("SU produced +6 with +5 and -1");
            else bad("SU did not produce +6 with +5 and -1");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 1;
            ram[CPU.REG_A] = 1;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xffff) good("SU produced -0 with +1 and +1");
            else bad("SU did not produce -0 with +1 and +1 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 0x7ffd;
            ram[CPU.REG_A] = 0x3fff;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x4001) good("SU produced +1 overflowed with +16383 and -2");
            else bad("SU did not produce +1 overflowed with +16383 and -2 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + 0x0ff;
            ram[0xff] = 2;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xbffe) good("SU produced -1 overflowed with -16383 and +2");
            else bad("SU did not produce -1 overflowed with -16383 and +2 ");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + CPU.REG_CYL;
            ram[CPU.REG_CYL] = 0x6555;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_CYL] == 0x4aab) good("SU CYL correclty shifted CYL");
            else bad("SU CYL did not correctly shift CYL");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + CPU.REG_CYR;
            ram[CPU.REG_CYR] = 0x6555;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_CYR] == 0x72aa) good("SU CYR correclty shifted CYR");
            else bad("SU CYR did not correctly shift CYR");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x6000 + CPU.REG_SR;
            ram[CPU.REG_SR] = 0x6554;
            ram[CPU.REG_A] = 0xfffd;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_SR] == 0x72aa) good("SU SR correclty shifted SR");
            else bad("SU SR did not correctly shift SR");
            results += "\r\n";
        }

        private void tc_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x0000 + 0x0ff;
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0xff) good("TC properly jumped to 0xff");
            else bad("TC did not jump to 0xff");
            if (ram[CPU.REG_Q] == 0x801) good("TC properly set Q to 0x801");
            else bad("TC did not properly set Q to 0x801");
            cpu.reset();
            rom[0x800] = 0x0000 + CPU.REG_Q;
            ram[CPU.REG_Q] = 0x425;
            cpu.cycle();
            if (ram[CPU.REG_Z] == CPU.REG_Q) good("TC Q properly jumped to Q");
            else bad("TC Q did not jump to Q");
            if (ram[CPU.REG_Q] == 0x425) good("TC Q did not alter Q");
            else bad("TC Q altered Q");
            results += "\r\n";
        }

        private void tcf_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x1000 + 0x0af0;
            ram[CPU.REG_Q] = 0x425;
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0xaf0) good("TCF properly jumped to 0xaf0");
            else bad("TCF did not jump to 0xaf0");
            if (ram[CPU.REG_Q] == 0x425) good("TCF did not alter Q");
            else bad("TCF altered Q");
            results += "\r\n";
        }

        private void ts_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x5800 + 0x0af;
            ram[CPU.REG_A] = 0x0425;
            cpu.cycle();
            if (ram[0xaf] == 0x425) good("TS correctly wrote 0x425 to memory");
            else bad("TS did not correclty write 0x425 to memory");
            if (ram[CPU.REG_Z] == 0x801) good("TS did not skip on non-overflow positive");
            else bad("TS skipped on non-overflow positive");
            if (ram[CPU.REG_A] == 0x425) good("TS did not alter A on non-overflow positive");
            else bad("TS altered A on non-overflow positive");
            cpu.reset();
            rom[0x800] = 0x5800 + 0x0af;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            if (ram[0xaf] == 0x7ffa) good("TS correctly wrote -5 to memory");
            else bad("TS did not correclty write -5 to memory");
            if (ram[CPU.REG_Z] == 0x801) good("TS did not skip on non-overflow negative");
            else bad("TS skipped on non-overflow negative");
            if (ram[CPU.REG_A] == 0xfffa) good("TS did not alter A on non-overflow negative");
            else bad("TS altered A on non-overflow negative");
            cpu.reset();
            rom[0x800] = 0x5800 + 0x0af;
            ram[CPU.REG_A] = 0x4005;
            cpu.cycle();
            if (ram[0xaf] == 0x0005) good("TS correctly wrote +5 to memory from overflowed +5");
            else bad("TS did not correclty write +5 to memory from overflowed +5");
            if (ram[CPU.REG_Z] == 0x802) good("TS skipped on overflow positive");
            else bad("TS did not skip on overflow positive");
            if (ram[CPU.REG_A] == 0x0001) good("TS set A to +1 on positive overflow");
            else bad("TS did not alter A on positive overflow");
            cpu.reset();
            rom[0x800] = 0x5800 + 0x0af;
            ram[CPU.REG_A] = 0xbffa;
            cpu.cycle();
            if (ram[0xaf] == 0x7ffa) good("TS correctly wrote -5 to memory from overflowed -5");
            else bad("TS did not correclty write -5 to memory from overflowed -5");
            if (ram[CPU.REG_Z] == 0x802) good("TS skipped on overflow negative");
            else bad("TS did not skip on overflow negative");
            if (ram[CPU.REG_A] == 0xffff) good("TS set A to -1 on negative overflow");
            else bad("TS did not alter A on negative overflow");
            cpu.reset();
            rom[0x800] = 0x5800 + CPU.REG_A;
            ram[CPU.REG_A] = 0x0425;
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x801) good("TS A did not skip on non-overflow positive");
            else bad("TS A skipped on non-overflow positive");
            if (ram[CPU.REG_A] == 0x425) good("TS A did not alter A on non-overflow positive");
            else bad("TS A altered A on non-overflow positive");
            cpu.reset();
            rom[0x800] = 0x5800 + CPU.REG_A;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x801) good("TS A did not skip on non-overflow negative");
            else bad("TS A skipped on non-overflow positive");
            if (ram[CPU.REG_A] == 0xfffa) good("TS A did not alter A on non-overflow negative");
            else bad("TS A altered A on non-overflow positive");
            cpu.reset();
            rom[0x800] = 0x5800 + CPU.REG_A;
            ram[CPU.REG_A] = 0x07005;
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("TS A skipped on overflow positive");
            else bad("TS A did not skip on overflow positive");
            if (ram[CPU.REG_A] == 0x7005) good("TS A did not alter A on overflow positive");
            else bad("TS A altered A on overflow positive");
            cpu.reset();
            rom[0x800] = 0x5800 + CPU.REG_A;
            ram[CPU.REG_A] = 0x0b005;
            cpu.cycle();
            if (ram[CPU.REG_Z] == 0x802) good("TS A skipped on overflow negative");
            else bad("TS A did not skip on overflow negative");
            if (ram[CPU.REG_A] == 0xb005) good("TS A did not alter A on overflow negative");
            else bad("TS A altered A on overflow negative");
            results += "\r\n";
        }

        private void wand_tests()
        {
            int[] ram;
            int[] rom;
            int[] port;
            ram = cpu.getRam();
            rom = cpu.getRom();
            port = cpu.getPorts();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0600 + 0x0ff;
            port[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 4) good("WAND produced +4 for +5 and +6");
            else bad("WAND did not produce +4 for +5 and +6");
            if (port[0xff] == 4) good("WAND also wrote the port");
            else bad("WAND did not write the port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0600 + 0x0ff;
            port[0xff] = 0x2009;
            ram[CPU.REG_A] = 0xb00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x2008) good("WAND produced 0x2008 for 0x2009 and 0xb00a");
            else bad("WAND did not produce 0x2008 for 0x2009 and 0xb00a");
            if (port[0xff] == 0x2008) good("WAND also wrote the port");
            else bad("WAND did not write the port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0600 + 0x0ff;
            port[0xff] = 0x6005;
            ram[CPU.REG_A] = 0xd00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xc000) good("WAND produced 0xc000 for 0x6005 and 0xd00a");
            else bad("WAND did not produce 0xc000 for 0x6005 and 0xd00a");
            if (port[0xff] == 0x4000) good("WAND also wrote the port");
            else bad("WAND did not write the port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0600 + CPU.REG_L;
            port[CPU.REG_L] = 0xb000;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0x8000) good("WAND produced 0x8000 for 0xb000 and 0xc000");
            else bad("WAND did not produce 0x8000 for 0xb000 and 0xc000");
            if (port[0xff] == 0x4000) good("WAND also wrote the port");
            else bad("WAND did not write the port");
            results += "\r\n";
        }

        private void wor_tests()
        {
            int[] ram;
            int[] rom;
            int[] port;
            ram = cpu.getRam();
            rom = cpu.getRom();
            port = cpu.getPorts();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0a00 + 0x0ff;
            port[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 7) good("WOR produced +7 for +5 and +6");
            else bad("WOR did not produce +7 for +5 and +6");
            if (port[0xff] == 7) good("WOR also wrote the port");
            else bad("WOR did not write the port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0a00 + 0x0ff;
            port[0xff] = 0x2009;
            ram[CPU.REG_A] = 0xb00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xf00b) good("WOR produced 0xf00b for 0x2009 and 0xb00a");
            else bad("WOR did not produce 0xb00b for 0xf009 and 0xb00a");
            if (port[0xff] == 0x700b) good("WOR also wrote the port");
            else bad("WOR did not write the port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0a00 + 0x0ff;
            port[0xff] = 0x6005;
            ram[CPU.REG_A] = 0xd00a;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xf00f) good("WOR produced 0xf00f for 0x6005 and 0xd00a");
            else bad("WOR did not produce 0xf00f for 0x6005 and 0xd00a");
            if (port[0xff] == 0x700f) good("WOR also wrote the port");
            else bad("WOR did not write the port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0a00 + CPU.REG_L;
            port[CPU.REG_L] = 0xb000;
            ram[CPU.REG_A] = 0xc000;
            cpu.cycle();
            cpu.cycle();
            if (ram[CPU.REG_A] == 0xf000) good("WOR produced 0xf000 for 0xb000 and 0xc000");
            else bad("WOR did not produce 0xf000 for 0xb000 and 0xc000");
            if (port[CPU.REG_L] == 0xf000) good("WOR also wrote the port");
            else bad("WOR did not write the port");
            results += "\r\n";
        }

        private void write_tests()
        {
            int[] ram;
            int[] rom;
            int[] port;
            ram = cpu.getRam();
            rom = cpu.getRom();
            port = cpu.getPorts();
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0200 + 0x0ff;
            port[0xff] = 5;
            ram[CPU.REG_A] = 6;
            cpu.cycle();
            cpu.cycle();
            if (port[0xff] == 6) good("WRITE correctly wrote +6 to a port");
            else bad("WRITE did not correctly write +6 to a port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0200 + 0x0ff;
            port[0xff] = 5;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            cpu.cycle();
            if (port[0xff] == 0x7ffa) good("WRITE correctly wrote -5 to a port");
            else bad("WRITE did not correctly write -5 to a port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0200 + 0xff;
            port[0xff] = 7;
            ram[CPU.REG_A] = 0xbffa;
            cpu.cycle();
            cpu.cycle();
            if (port[0xff] == 0x7ffa) good("WRITE correctly wrote a 16-bit value to a 15-bit port");
            else bad("WRITE did not correctly write a 16-bit value to a 15-bit port");
            cpu.reset();
            rom[0x800] = 0x0006;
            rom[0x801] = 0x0200 + CPU.REG_L;
            port[CPU.REG_L] = 7;
            ram[CPU.REG_A] = 0xbffa;
            cpu.cycle();
            cpu.cycle();
            if (port[CPU.REG_L] == 0xbffa) good("WRITE correctly wrote a 16-bit value to a 16-bit port");
            else bad("WRITE did not correctly write a 16-bit value to a 16-bit port");
            results += "\r\n";
        }

        private void xch_tests()
        {
            int[] ram;
            int[] rom;
            ram = cpu.getRam();
            rom = cpu.getRom();
            cpu.reset();
            rom[0x800] = 0x5c00 + 0x0af;
            ram[0xaf] = 3;
            ram[CPU.REG_A] = 5;
            cpu.cycle();
            if (ram[0xaf] == 5) good("XCH correctly wrote +5 to memory");
            else bad("XCH did not correclty write +5 to memory");
            if (ram[CPU.REG_A] == 3) good("XCH correctly wrote +3 to A");
            else bad("XCH did not correctly write +3 to A");
            cpu.reset();
            rom[0x800] = 0x5c00 + 0x0af;
            ram[0xaf] = 0x7ffc;
            ram[CPU.REG_A] = 0xfffa;
            cpu.cycle();
            if (ram[0xaf] == 0x7ffa) good("XCH correctly wrote -5 to memory");
            else bad("XCH did not correclty write -5 to memory");
            if (ram[CPU.REG_A] == 0xfffc) good("XCH correctly wrote -3 to A");
            else bad("XCH did not correctly write -3 to A");
            cpu.reset();
            rom[0x800] = 0x5c00 + 0x0af;
            ram[0xaf] = 0x0002;
            ram[CPU.REG_A] = 0xbffa;
            cpu.cycle();
            if (ram[0xaf] == 0x7ffa) good("XCH correctly wrote overflowed -5 to memory");
            else bad("XCH did not correclty write overflowed -5 to memory");
            if (ram[CPU.REG_A] == 2) good("XCH correctly wrote +2 to A");
            else bad("XCH did not correctly write +2 to A");
            cpu.reset();
            rom[0x800] = 0x5c00 + CPU.REG_CYL;
            ram[CPU.REG_CYL] = 0x0002;
            ram[CPU.REG_A] = 0x0006;
            cpu.cycle();
            if (ram[CPU.REG_CYL] == 12) good("XCH CYL correctly wrote +12 to memory from +6");
            else bad("XCH CYL did not correclty write +12 to memory from +6");
            if (ram[CPU.REG_A] == 2) good("XCH CYL correctly wrote +2 to A from CYL");
            else bad("XCH CYL did not correctly write +2 to A from CYL");
            cpu.reset();
            rom[0x800] = 0x5c00 + CPU.REG_CYR;
            ram[CPU.REG_CYR] = 0x0005;
            ram[CPU.REG_A] = 0x0006;
            cpu.cycle();
            if (ram[CPU.REG_CYR] == 3) good("XCH CYR correctly wrote +3 to memory from +6");
            else bad("XCH CYR did not correclty write +3 to memory from +6");
            if (ram[CPU.REG_A] == 5) good("XCH CYR correctly wrote +5 to A from CYR");
            else bad("XCH CYL did not correctly write +5 to A from CYR");
            results += "\r\n";
        }

        public String runTests()
        {
            results = "";
            badTests = 0;
            goodTests = 0;
            ad_tests();
            ads_tests();
            aug_tests();
            bzmf_tests();
            bzf_tests();
            ca_tests();
            ccs_tests();
            cs_tests();
            das_tests();
            dca_tests();
            dcs_tests();
            dim_tests();
            dv_tests();
            dxch_tests();
            incr_tests();
            index_tests();
            inhint_tests();
            lxch_tests();
            mask_tests();
            mp_tests();
            msu_tests();
            qxch_tests();
            rand_tests();
            read_tests();
            relint_tests();
            resume_tests();
            ror_tests();
            rxor_tests();
            su_tests();
            tc_tests();
            tcf_tests();
            ts_tests();
            wand_tests();
            wor_tests();
            write_tests();
            xch_tests();
            results += goodTests.ToString() + " tests passed\r\n";
            results += badTests.ToString() + " tests failed\r\n";
            return results;
        }

    }
}
